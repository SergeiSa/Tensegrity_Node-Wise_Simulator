clc; close all; clear;

sim_time = 2;

k = 16;
active_nodes_indices = 1:k;

Cables = zeros(k, k);

%upper circle
Cables(1, 2) = 1;
Cables(2, 3) = 1;
Cables(3, 4) = 1;
Cables(4, 5) = 1;
Cables(5, 6) = 1;
Cables(6, 1) = 1;

%lower circle
Cables(11, 12) = 1;
Cables(12, 13) = 1;
Cables(13, 14) = 1;
Cables(14, 15) = 1;
Cables(15, 16) = 1;
Cables(16, 11) = 1;

%upper circle-to-down cables
Cables(1, 7) = 1;
Cables(2, 8) = 1;
Cables(3, 8) = 1;
Cables(3, 9) = 1;
Cables(4, 9) = 1;
Cables(5, 10) = 1;
Cables(6, 10) = 1;
Cables(6, 7) = 1;


%lower circle-to-up cables
Cables(11, 7) = 1;
Cables(12, 8) = 1;
Cables(13, 8) = 1;
Cables(13, 9) = 1;
Cables(14, 9) = 1;
Cables(15, 10) = 1;
Cables(16, 10) = 1;
Cables(16, 7) = 1;

Cables = Cables + Cables';
if max(Cables(:)) > 1
    error('Something went wrong!')
end


Rods = zeros(k, k);
%z direction
Rods(1, 11) = 1;
Rods(2, 12) = 1;
Rods(4, 14) = 1;
Rods(5, 15) = 1;

%y direction
Rods(3, 6) = 1;
Rods(13, 16) = 1;

%x direction
Rods(7, 10) = 1;
Rods(8, 9) = 1;

Rods = Rods + Rods';
if max(Rods(:)) > 1
    error('Something went wrong!')
end



robot.Connectivity = Cables + Rods;
robot.Cables = Cables;
robot.Rods = Rods;

L_cables = Cables * 0.5;
L_rods = Rods * 2;
robot.rest_lengths = L_cables + L_rods;

mu_cables = Cables * 10;
mu_rods = Rods * 100;
robot.stiffness_coef = mu_cables + mu_rods;

nodes_position1 = [-1  1 1.5   1 -1  -1.5;
                   -1 -1 0     1  1   0;
                    1  1 1     1  1   1];
nodes_position2 = [-1.2  1.2  1.2  -1.2;
                   -1.5 -1.5  1.5   1.5;
                    0    0    0     0];
nodes_position3 = [-1  1  1.5   1  -1  -1.5;
                   -1 -1  0     1   1   0;
                   -1 -1 -1    -1  -1  -1];
robot.nodes_position  = [nodes_position1, nodes_position2, nodes_position3];               

temp = load('quadrotor_data_turtle_initial_position');
robot.nodes_position = temp.initial_position;

robot.nodes_velocity = zeros(3, size(robot.Connectivity, 1));
robot.nodes_masses = ones(size(robot.Connectivity, 1), 1);
robot.nodes_dissipation = ones(size(robot.Connectivity, 1), 1);


rotor_handle1 = quadrotor_set_rotor(1, get_second_node_connected_to_rod(robot, 1), eye(3));
rotor_handle2 = quadrotor_set_rotor(2, get_second_node_connected_to_rod(robot, 2), eye(3));
rotor_handle3 = quadrotor_set_rotor(4, get_second_node_connected_to_rod(robot, 4), eye(3));
rotor_handle4 = quadrotor_set_rotor(5, get_second_node_connected_to_rod(robot, 5), eye(3));
     
rotors_set = {rotor_handle1, rotor_handle2, rotor_handle3, rotor_handle4};

%%%%%%%%%%%%%%%%%%%%%%
%%%%% drawing 
   
    
figure_handle = figure('Color', 'w');
vis_Draw(robot, robot.nodes_position);

for i = 1:4
    
[f, application_node_index] = rotors_set{i}(robot.nodes_position, 0.5);
node = reshape(robot.nodes_position(:, application_node_index), [1, 3]);
mArrow3(node, node + reshape(f, [1, 3]), 'facealpha', 0.5, 'color', 'red', 'stemWidth', 0.02);

end
% [f1, application_node_index1] = rotor_handle1(robot.nodes_position, 0.5);
% [f2, application_node_index2] = rotor_handle2(robot.nodes_position, 0.5);
% [f3, application_node_index3] = rotor_handle3(robot.nodes_position, 0.5);  
% [f4, application_node_index4] = rotor_handle4(robot.nodes_position, 0.5);
% node1 = reshape(robot.nodes_position(:, application_node_index1), [1, 3]);
% node2 = reshape(robot.nodes_position(:, application_node_index2), [1, 3]);
% node3 = reshape(robot.nodes_position(:, application_node_index3), [1, 3]);
% node4 = reshape(robot.nodes_position(:, application_node_index3), [1, 4]);
% mArrow3(node1, node1 + reshape(f1, [1, 3]), 'facealpha', 0.5, 'color', 'red', 'stemWidth', 0.02);
% mArrow3(node2, node2 + reshape(f2, [1, 3]), 'facealpha', 0.5, 'color', 'red', 'stemWidth', 0.02);
% mArrow3(node3, node3 + reshape(f3, [1, 3]), 'facealpha', 0.5, 'color', 'red', 'stemWidth', 0.02);

axis equal;


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Res = quadrotor_Simulate(robot, sim_time, 10^(-3), active_nodes_indices, rotors_set);

figure_handle = figure('Color', 'w');
plot(Res.Time, Res.Position(:, [1, 2, 3]), 'LineWidth', 2, 'LineStyle', '-'); hold on;
grid on; grid minor;
ax = gca;
ax.GridAlpha = 0.6;
ax.LineWidth = 0.5;
ax.MinorGridLineStyle = '-';
ax.MinorGridAlpha = 0.2;
ax.FontName = 'Times New Roman';
ax.FontSize = 18;
xlabel_handle = xlabel('$$t$$, s');
xlabel_handle.Interpreter = 'latex';
ylabel_handle = ylabel('$$x_1$$, $$y_1$$, $$z_1$$ (m)');
ylabel_handle.Interpreter = 'latex';
legend_handle = legend('$$x_1$$ (m)', '$$y_1$$ (m)', '$$z_1$$ (m)');
legend_handle.Interpreter = 'latex';


figure_handle = figure('Color', 'w');
plot3(Res.Position(:, 1), Res.Position(:, 2), Res.Position(:, 3), 'LineWidth', 2, 'LineStyle', '-'); hold on;
plot3(Res.Position(:, 4), Res.Position(:, 5), Res.Position(:, 6), 'LineWidth', 2, 'LineStyle', '-'); hold on;
plot3(Res.Position(:, 7), Res.Position(:, 8), Res.Position(:, 9), 'LineWidth', 2, 'LineStyle', '-'); hold on;
grid on; grid minor;
ax = gca;
ax.GridAlpha = 0.6;
ax.LineWidth = 0.5;
ax.MinorGridLineStyle = '-';
ax.MinorGridAlpha = 0.2;
ax.FontName = 'Times New Roman';
ax.FontSize = 18;
xlabel_handle = xlabel('$$t$$, s');
xlabel_handle.Interpreter = 'latex';
ylabel_handle = ylabel('$$r_i$$ (m)');
ylabel_handle.Interpreter = 'latex';
legend_handle = legend('$$r_1$$', '$$r_2$$', '$$r_1$$');
legend_handle.Interpreter = 'latex';

figure_handle = figure('Color', 'w');
h = [];
ax = gca;

xlim = [min(min(Res.Position(:, (1:k)*3-2 ))) max(max(Res.Position(:,   (1:k)*3-2)))];
xlim = [min(min(Res.Position(:, (1:k)*3-1 ))) max(max(Res.Position(:,   (1:k)*3-1)))];
xlim = [min(min(Res.Position(:, (1:k)*3   ))) max(max(Res.Position(:, (1:k)*3 )))];
    ax.XLim = [min(min(Res.Position(:, (1:k)*3-2 ))) max(max(Res.Position(:,   (1:k)*3-2)))];
    ax.YLim = [min(min(Res.Position(:, (1:k)*3-1 ))) max(max(Res.Position(:,   (1:k)*3-1)))];
    ax.ZLim = [min(min(Res.Position(:, (1:k)*3   ))) max(max(Res.Position(:, (1:k)*3 )))];
for i = 1:50:size(Res.Position, 1)
    r = reshape(Res.Position(i, :), [3, size(Res.Position, 2)/3]);
    thrusts = reshape(Res.Thrusts(i, :), [3, size(Res.Thrusts, 2)/3]);
    hold off;
    vis_Draw(robot, r);
    quadrotor_vis_thrusts(r, thrusts, active_nodes_indices);
    
    axis equal;
    drawnow;
end

